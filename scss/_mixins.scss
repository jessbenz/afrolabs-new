@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}/* example of this in use: @include transition(color .3s ease); */

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow:inset $top $left $blur $size $color;
        -moz-box-shadow:inset $top $left $blur $size $color;
        box-shadow:inset $top $left $blur $size $color;
    } @else {
        -webkit-box-shadow: $top $left $blur $size $color;
        -moz-box-shadow: $top $left $blur $size $color;
        box-shadow: $top $left $blur $size $color;
    }
} /* @include box-shadow(1px,1px,1px,0, #fff, true); */

@mixin box-shadow-none {
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
}

@mixin btn-text {
    font-size: $small-text;
    text-transform: uppercase;
    letter-spacing: .17em;
    font-weight: 400;
}

@mixin gradient($start-color, $start-pos, $end-color, $end-pos, $orientation) {
    background: $start-color;
    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color $start-pos, $end-color $end-pos);
      background: linear-gradient(to bottom,  $start-color $start-pos, $end-color $end-pos);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left,  $start-color $start-pos, $end-color $end-pos);
      background: linear-gradient(to right,  $start-color $start-pos, $end-color $end-pos);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover,  $start-color $start-pos, $end-color $end-pos);
      background: radial-gradient(ellipse at center,  $start-color $start-pos, $end-color $end-pos);
    }
}

@mixin opacity($value) {
    $ie-value: $value * 100;
    opacity: $value;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$ie-value+")";
    filter: alpha(opacity=$ie-value);
}

@mixin transform-move($x,$y) {
    transform: translate($x,$y);
    -webkit-transform: translate($x,$y);
    -moz-transform: translate($x,$y);
    -o-transform: translate($x,$y);
    -ms-transform: translate($x,$y);
}